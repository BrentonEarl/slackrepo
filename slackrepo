#!/bin/bash
#-------------------------------------------------------------------------------
# slackrepo - Automated SlackBuilding from git repo into package repo,
#             for more details see /usr/doc/slackrepo-*/HOWTO
#
# Copyright 2014 David Spencer, Baildon, West Yorkshire, U.K.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#-------------------------------------------------------------------------------

function print_usage
{
  echo 'Usage:'
  echo "  $(basename "$0") build   [--control_args] [item...]"
  echo "  $(basename "$0") rebuild [--control_args] [item...]"
  echo "  $(basename "$0") update  [--control_args] [item...]"
  echo "  $(basename "$0") remove  [--control_args] item..."
  echo "  $(basename "$0") revert  [--control_args] item..."
  echo 'Control args:'
  echo '  --repo=ID'
  echo '  --quiet | --verbose | --very-verbose'
  echo '  --test'
  echo '  --dry-run | --install'
  echo '  --keep-tmp'
  return
}

#-------------------------------------------------------------------------------

function exit_cleanup
{
  stty sane   # in case we're killed waiting for the gpg passphrase
  if [ -n "$DBUS_SESSION_BUS_PID" ]; then
    ${SUDO}kill -15 "$DBUS_SESSION_BUS_PID"
  fi
  if [ -n "$CHROOTDIR" ]; then
    ${SUDO}umount -l "$CHROOTDIR"/dev/shm
    ${SUDO}umount -l "$CHROOTDIR"/proc
    ${SUDO}umount -l "$CHROOTDIR"
  fi
  [ -n "$PIDFILE" ] && rm -f "$PIDFILE" 2>/dev/null
}

#-------------------------------------------------------------------------------

[ $# = 0 ] && { print_usage; exit_cleanup; exit 0; }

starttime=$(date +%s)

#-------------------------------------------------------------------------------
# Command modes and options
#-------------------------------------------------------------------------------

# General rule:
# OPT_XXXX is the internal representation of command line option XXXX
# SR_XXXX is the internal representation of config file variable XXXX

# The command modes and options are extensible by adding more source files in
#   /usr/libexec/slackrepo/functions.d
# To define an extended command mode 'foo', add a function named foo_command
# To define an extended option '--bar', do OPTIONLIST+=( 'BAR' )

# Initialise OPTIONLIST first so that any extended options are at the end
OPTIONLIST=( 'REPO' 'QUIET' 'VERBOSE' 'VERY_VERBOSE' 'MAKE_VERBOSE' \
  'TEST' 'DRY_RUN' 'INSTALL' 'KEEP_TMP' 'TRACE' 'CHROOT' 'COLOR' 'NICE' )

# Get the support functions
for f in /usr/libexec/$(basename "$0")/functions.d/*.sh; do
  if [ -x "$f" ]; then
    . "$f"
  fi
done

# Initialise all the undefined options to null, set -u friendly ;-)
for opt in "${OPTIONLIST[@]}" ; do
  optopt="OPT_$opt"
  [ "${!optopt-unset}" = 'unset' ] && [ -z "${!optopt}" ] && eval "$optopt"=''
done
# Initialise OPT_REPO from env var $REPO:
OPT_REPO="$REPO"
# Defaults for OPT_COLOR and OPT_NICE:
OPT_COLOR='auto'
OPT_NICE='5'
# No default for the processing mode (build/rebuild/update/remove):
CMD=''

while [ $# != 0 ]; do
  case "$1" in
    # we'll accept add/build/rebuild/update/remove/revert with or without '--'
    build | --build | add | --add )
      [ -n "$CMD" ] && { print_usage; exit_cleanup; exit 3; }
      CMD='build'
      shift; continue ;;
    rebuild | --rebuild )
      [ -n "$CMD" ] && { print_usage; exit_cleanup; exit 3; }
      CMD='rebuild'
      shift; continue ;;
    update | --update )
      [ -n "$CMD" ] && { print_usage; exit_cleanup; exit 3; }
      CMD='update'
      shift; continue ;;
    remove | --remove )
      [ -n "$CMD" ] && { print_usage; exit_cleanup; exit 3; }
      CMD='remove'
      shift; continue ;;
    revert | --revert )
      [ -n "$CMD" ] && { print_usage; exit_cleanup; exit 3; }
      CMD='revert'
      shift; continue ;;
    --repo=* )
      OPT_REPO="${1/--repo=/}"
      shift; continue ;;
    --quiet | -q )
      OPT_QUIET='y'
      shift; continue ;;
    --verbose | -v )
      [ "$OPT_VERBOSE" = 'y' ] && OPT_VERY_VERBOSE='y'
      OPT_VERBOSE='y'
      shift; continue ;;
    --very-verbose | -vv )
      OPT_VERY_VERBOSE='y'
      shift; continue ;;
    -vvv )
      OPT_VERY_VERBOSE='y'
      OPT_MAKE_VERBOSE='y'
      shift; continue ;;
    --color=* | --colour=* )
      OPT_COLOR="${1/--colo*r=/}"
      shift; continue ;;
    --* )
      found='n'
      for opt in "${OPTIONLIST[@]}"; do
        arg=$(echo "$opt" | tr '_' '-' | tr '[:upper:]' '[:lower:]')
        if [ "$1" = "--${arg}" -o "$1" = "--${arg}=yes" -o "$1" = "--${arg}=y" ]; then
          eval OPT_"${opt}"='y'
          found='y'; break
        elif [ "$1" = "--no-${arg}" -o "$1" = "--${arg}=no" -o "$1" = "--${arg}=n" ]; then
          eval OPT_"${opt}"='n'
          found='y'; break
        elif [ "${1/=*/=}" = "--${arg}=" ]; then
          eval OPT_"${opt}"="${1#*=}"
          found='y'; break
        fi
      done
      [ "$found" = 'n' ] && echo "$(basename "$0"): Warning: invalid control argument: $1" >&2
      shift; continue ;;
    * )
      break ;;
  esac
done

if [ -z "$CMD" ]; then
  print_usage
  exit_cleanup
  exit 3
elif [ $# = 0 ]; then
  if [ "$CMD" = 'remove' ]; then
    echo "Usage: $(basename "$0") remove [--repo=ID] item..."
    echo "(you must specify the items to be removed)"
    exit_cleanup
    exit 3
  elif [ "$CMD" = 'revert' ] ; then
    echo "Usage: $(basename "$0") revert [--repo=ID] item..."
    echo "(you must specify the items to be reverted)"
    exit_cleanup
    exit 3
  fi
fi

#-------------------------------------------------------------------------------
# Startup
#-------------------------------------------------------------------------------

if [ "$EUID" != 0 ]; then
  if [ ! -x /usr/bin/fakeroot ]; then
    echo "$(basename "$0"): Running as user, but fakeroot is not installed."
    echo "$(basename "$0"): You should either install fakeroot or run slackrepo as root."
    exit_cleanup
    exit 3
  fi
  SUDO="sudo "
  export PATH="/usr/libexec/$(basename "$0"):/usr/local/sbin:/usr/sbin:/sbin:$PATH"
  # We need to launch a dbus session instance for root outside the chroot, to prevent
  # commands like gconftool-2 (in doinst.sh) launching a dbus in the chroot that
  # would persist after chroot exits and stop us unmounting the overlay (*BIG SIGH*)
  dbuscrap="$(DISPLAY='' ${SUDO}dbus-launch --sh-syntax 2>/dev/null)"
  eval "${dbuscrap}"
else
  SUDO=''
  export PATH="/usr/libexec/$(basename "$0"):$PATH"
  #### temporary solution, until we do locking properly
  PIDFILE="/var/run/$(basename "$0").pid"
  oldpid=$(cat "$PIDFILE" 2>/dev/null)
  if [ -z "$oldpid" -o -z "$(pgrep -u root "$(basename "$0")" | grep -v $$)" ]; then
    echo $$ > "$PIDFILE"
  else
    echo "$(basename "$0"): Another instance is already running." >&2
    exit_cleanup
    exit 3
  fi
  # If there is no existing dbus session instance for root, create one
  if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
    dbuscrap="$(DISPLAY='' dbus-launch --sh-syntax 2>/dev/null)"
    eval "${dbuscrap}"
  fi
fi

# Ensure ctrl-c (etc) exits the whole thing, not just a random subshell
trap "exit_cleanup; exit 1" SIGINT SIGQUIT SIGTERM

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------

# Find out about the host system.
if [ -f /etc/os-release ]; then
  # Lennart is my copilot <3
  . /etc/os-release
  SYS_OSNAME="${ID:-linux}"
  SYS_OSVER="${VERSION_ID:-}"
elif [ -f /etc/slackware-version ]; then
  SYS_OSNAME='slackware'
  SYS_OSVER="$(sed 's/^Slackware //' /etc/slackware-version)"
else
  echo "$(basename "$0"): Error: /etc/slackware-version not found"
  exit_cleanup
  exit 4
fi
SYS_ARCH=$(uname -m)
SYS_MULTILIB='n'
[ "$SYS_ARCH" = 'x86_64' -a -f /etc/profile.d/32dev.sh ] && SYS_MULTILIB='y'
SYS_NPROC=$(nproc)
SYS_MHz=$(awk '/^cpu MHz/ {sum+=$4} END {print sum}' < /proc/cpuinfo)
SYS_OVERLAYFS='n'
# don't look at the kernel version -- somebody might have the old patchset
[ -f /lib/modules/"$(uname -r)"/kernel/fs/overlayfs/overlay.ko ] && SYS_OVERLAYFS='y'
SYS_GOODMAKE='n'
[ -f /var/log/packages/make-3.82-x86_64-5 ] && SYS_GOODMAKE='y'  #### crude but effective

# Next, do the config variables.
# These config vars are prefixed with SR_ to stop SlackBuilds picking them up.
# However, they do NOT have the SR_ prefix in the config files or environment.
varnames="SBREPO SRCREPO PKGREPO PKGBACKUP \
          HINTDIR QUEUEDIR LOGDIR DATABASE TMP \
          ARCH TAG PKGTYPE NUMJOBS"
# These config vars don't need to be obfuscated:
genrepnames="USE_GENREPOS REPOSROOT REPOSOWNER REPOSOWNERGPG DL_URL \
             RSS_TITLE RSS_ICON RSS_LINK RSS_CLURL RSS_DESCRIPTION RSS_FEEDMAX RSS_UUID \
             GPGBIN USE_GPGAGENT FOR_SLAPTGET FOLLOW_SYMLINKS REPO_SUBDIRS REPO_EXCLUDES"
initnames="INIT_GITCLONE INIT_GITBRANCH"
# Initialise the SR_variables from the environment:
for envvar in $varnames $genrepnames $initnames "${OPTIONLIST[@]}" ; do
  srvar="SR_$envvar"
  eval "$srvar=\"${!envvar}\""
done

# Per-user config files:
userconf=~/.slackreporc
genrepconf=~/.genreprc
# Read the user config file to get $REPO:
if [ -f "$userconf" ]; then
  . "$userconf"
fi

# If we didn't get a repo id from env or cmd line, drop $REPO from the user config file into $OPT_REPO:
[ -z "$OPT_REPO" ] && OPT_REPO="${REPO:-SBo}"
# Read the main repo config file, overriding anything that came from the user config file:
repoconf="${CONFIGDIR:-/etc/slackrepo}/slackrepo_${OPT_REPO}.conf"
if [ -f "$repoconf" ]; then
  . "$repoconf"
else
  echo "$(basename "$0"): Error: repo configuration file not found: $repoconf" >&2; exit_cleanup; exit 2
fi
# Read the user config files to override everything in the main repo config file.
# (Yes, we're reading ~/.slackreporc twice, but that's a lot easier than a proper solution)
for conf in "$userconf" "$genrepconf"; do
  if [ -f "$conf" ]; then
    . "$conf"
  fi
done

# Backfill the SR_ variables from config file variables,
# and unset the config file variables to prevent SlackBuilds from seeing them:
for name in $varnames $genrepnames $initnames; do
  srvar="SR_$name"
  [ -z "${!srvar}" ] && eval "$srvar=\"${!name}\""
  eval unset "$name"
done
# and do something similar for the OPT_ variables:
for name in "${OPTIONLIST[@]}" ; do
  optvar="OPT_$name"
  [ -z "${!optvar}" ] && eval "$optvar=\"${!name}\""
  eval unset "$name"
  # simplify anything that looks like a Boolean:
  if   [ "${!optvar}" = '1' -o "${!optvar}" = 'yes' -o "${!optvar}" = 'y' -o "${!optvar}" = 'YES' -o "${!optvar}" = 'Y' ]; then
    eval "$optvar"='y'
  elif [ "${!optvar}" = '0' -o "${!optvar}" = 'no'  -o "${!optvar}" = 'n' -o "${!optvar}" = 'NO'  -o "${!optvar}" = 'N' -o "${!optvar}" = '' ]; then
    eval "$optvar"='n'
  fi
done

# Resolve conflicting options:
# --very-verbose implies --verbose
[ "$OPT_VERY_VERBOSE" = 'y' ] && OPT_VERBOSE='y'
# --verbose overrides --quiet
[ "$OPT_VERBOSE" = 'y' ] && OPT_QUIET='n'
# --dry-run overrides --install
[ "$OPT_DRY_RUN" = 'y' ] && OPT_INSTALL='n'
# lazy implementation of --make-verbose ;-)
[ "$OPT_MAKE_VERBOSE" = 'y' ] && export VERBOSE=1 V=1
# chroot will only work if overlayfs is available
if [ "$OPT_CHROOT" = 'y' ] && [ "$SYS_OVERLAYFS" != 'y' ]; then
  OPT_CHROOT='n'
  echo "$(basename "$0"): Warning: cannot enable --chroot (overlayfs is not available in your kernel)"
fi
# accept null niceness, map to zero
[ -z "$OPT_NICE" ] && OPT_NICE='0'

# If SR_NUMJOBS or SR_ARCH not set, work them out and set them explicitly
if [ -z "$SR_NUMJOBS" ]; then
  SR_NUMJOBS="-j$(( SYS_NPROC + 1 ))"
fi
# setting ARCH breaks lots of SlackBuilds, which is why we do it ;-)
if [ -z "$SR_ARCH" -o "$SR_ARCH" = '%ARCH%' ]; then
  case "$SYS_ARCH" in
    i?86) SR_ARCH='i486' ;;
    arm*) SR_ARCH='arm' ;;
       *) SR_ARCH="$SYS_ARCH" ;;
  esac
fi

# Substitute %REPO%, %SLACKVER% and %ARCH%
for name in $varnames $genrepnames $initnames; do
  srvar="SR_$name"
  eval "$srvar=\"$(echo "${!srvar}" | sed -e "s/%REPO%/$OPT_REPO/g" -e "s/%SLACKVER%/$SYS_OSVER/g" -e "s/%ARCH%/$SR_ARCH/g")\""
done

# Setup logging:
mkdir -p "$SR_LOGDIR"
MAINLOG="$SR_LOGDIR"/$(basename "$0")_$(date '+%F_%T').log
init_colour
if [ "$DOCOLOUR" = 'y' ]; then
  exec &> >( tee >(sed -e 's/\x1b\[[0-9;]*[a-zA-Z]//g' -e 's/\x1b[()].//' -e 's/\x0e//g' -e 's/\x0f//g' >"$MAINLOG") )
else
  exec &> >( tee "$MAINLOG" )
fi

# Log the config
log_verbose ""
log_verbose "OS: ${SYS_OSNAME}${SYS_OSVER}"
log_verbose "arch: ${SYS_ARCH}"
[ "$SYS_MULTILIB" = 'y' ] && log_verbose "multilib: yes"
log_verbose "nproc: ${SYS_NPROC}"
log_verbose "total MHz: ${SYS_MHz}"
[ "$SYS_OVERLAYFS" = 'y' ] && log_verbose "overlayfs: yes"
[ "$EUID" != 0 ] && log_verbose "username: $USER"
log_verbose ""
log_verbose "Configuration:"
log_verbose "  $CMD"
log_verbose "  --repo=$OPT_REPO"
if [ "$OPT_VERY_VERBOSE" = 'y' ]; then
  log_verbose "  --very-verbose"
elif [ "$OPT_VERBOSE" = 'y' ]; then
  log_verbose "  --verbose"
elif [ "$OPT_QUIET" = 'y' ]; then
  log_verbose "  --quiet"
fi
[ "$OPT_MAKE_VERBOSE" = 'y' ] && log_verbose "  --make-verbose"
[      "$OPT_DRY_RUN" = 'y' ] && log_verbose "  --dry-run"
[      "$OPT_INSTALL" = 'y' ] && log_verbose "  --install"
[         "$OPT_TEST" = 'y' ] && log_verbose "  --test"
[     "$OPT_KEEP_TMP" = 'y' ] && log_verbose "  --keep-tmp"
[        "$OPT_TRACE" = 'y' ] && log_verbose "  --trace"
[       "$OPT_CHROOT" = 'y' ] && log_verbose "  --chroot"
[    "$OPT_COLOR" != 'auto' ] && log_verbose "  --color=$OPT_COLOR"
[        "$OPT_NICE" != '5' ] && log_verbose "  --nice=$OPT_NICE"

for name in $varnames; do
  srvar="SR_$name"
  log_verbose "  $name=\"${!srvar}\""
done
if [ "$SR_USE_GENREPOS" = 1 ]; then
  for name in $genrepnames; do
    srvar="SR_$name"
    [ -n "${!srvar}" ] && log_verbose "  $name=\"${!srvar}\""
  done
else
  log_verbose "  USE_GENREPOS=\"$SR_USE_GENREPOS\""
fi

# Log significant environment variables. This is not a comprehensive list (see
# https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html)
# and upstream builds don't always use them properly.
for name in AR AS CC CFLAGS CXX CXXFLAGS CPP CPPFLAGS LD LDFLAGS DISTCC_HOSTS; do
  [ -n "${!name}" ] && log_verbose "  $name=\"${!name}\""
done
log_verbose ""

#-------------------------------------------------------------------------------
# Initialisation
#-------------------------------------------------------------------------------

# Arrays for tracking outcomes:
declare -a OKLIST WARNINGLIST SKIPPEDLIST FAILEDLIST ABORTEDLIST

# Create directories:
[ -d "$SR_SBREPO" ]   || \
  { log_normal "Creating SlackBuild repository: $SR_SBREPO" ; mkdir -p "$SR_SBREPO"    || \
  { log_error "Failed to create repository"; exit_cleanup; exit 4; }; }
[ -d "$SR_SRCREPO" ]  || \
  { log_normal "Creating source repository: $SR_SRCREPO"    ; mkdir -p "$SR_SRCREPO"   || \
  { log_error "Failed to create repository"; exit_cleanup; exit 4; }; }
[ -d "$SR_PKGREPO" ]  || \
  { log_normal "Creating package repository: $SR_PKGREPO"   ; mkdir -p "$SR_PKGREPO"   || \
  { log_error "Failed to create repository"; exit_cleanup; exit 4; }; }
[ -z "$SR_PKGBACKUP" ] || [ -d "$SR_PKGBACKUP" ] || \
  { log_normal "Creating backup repository: $SR_PKGBACKUP"  ; mkdir -p "$SR_PKGBACKUP" || \
  { log_error "Failed to create repository"; exit_cleanup; exit 4; }; }
[ -d "$SR_HINTDIR" ]  || \
  { log_normal "Creating hintfile directory: $SR_HINTDIR"   ; mkdir -p "$SR_HINTDIR"   || \
  { log_error "Failed to create directory";  exit_cleanup; exit 4; }; }
[ -d "$SR_QUEUEDIR" ] || \
  { log_normal "Creating queuefile directory: $SR_QUEUEDIR" ; mkdir -p "$SR_QUEUEDIR"  || \
  { log_error "Failed to create directory";  exit_cleanup; exit 4; }; }
[ -d "$SR_LOGDIR" ]   || \
  { log_normal "Creating log directory: $SR_LOGDIR"         ; mkdir -p "$SR_LOGDIR"    || \
  { log_error "Failed to create directory";  exit_cleanup; exit 4; }; }

# sqlite database for revision details, package identification, build times etc
# This is now *required* so here is a default path:
[ -n "$SR_DATABASE" ] || SR_DATABASE="$(dirname "$SR_SBREPO")/database_${OPT_REPO}.sqlite3"
db_init || { log_error "Failed to initialise database"; exit_cleanup; exit 4; }

# Temporary directory:
SR_TMP=${SR_TMP:-/tmp/SBo}
# really really don't want the next bit to go badly ;-)
if [ -n "$SR_TMP" -a -d "$SR_TMP" -a "$OPT_KEEP_TMP" != 'y' ]; then
  log_normal "Cleaning $SR_TMP ... "
  # remove it completely to avoid ownership and permission problems
  ${SUDO}rm -rf "${SR_TMP:?NotSetSR_TMP}"
  log_done
fi
mkdir -p "$SR_TMP"
# We also need a slackrepo-specific temporary directory
MYTMPDIR=$(mktemp -t -d slackrepo.XXXXXX) || { log_error "Failed to create temporary directory"; exit_cleanup; exit 4; }
[ -n "$SUDO" ] && chmod go+rx "$MYTMPDIR"
#### Probably should make --keep-tmp force $TMP into $MYTMPDIR

# Disposable package repository for dry run:
if [ "$OPT_DRY_RUN" = 'y' ]; then
  DRYREPO="$MYTMPDIR"/dryrun-packages
  rm -rf "$DRYREPO"
  mkdir -p "$DRYREPO"
fi

# Initialise the crazy estimator from the database :D
eval $(db_get_misc bogostuff)
BOGOCOUNT=${BOGOCOUNT:-0}
BOGOSUMX=${BOGOSUMX:-0}
BOGOSUMY=${BOGOSUMY:-0}
BOGOSUMX2=${BOGOSUMX2:-0}
BOGOSUMXY=${BOGOSUMXY:-0}
BOGOSLOPE=${BOGOSLOPE:-1.0}
BOGOCONST=${BOGOCONST:-0.0}

# We will use $SR_SBREPO as the working directory; it simplifies lots of git stuff.
cd "$SR_SBREPO" || { log_error "Failed to access SlackBuilds repository"; exit_cleanup; exit 4; }

# Initialise git (only if this is a build or rebuild or update)
if [ "$CMD" = 'build' ] || [ "$CMD" = 'rebuild' ] || [ "$CMD" = 'update' ]; then

  # git: initialise, or check and update
  if [ -z "$(ls "$SR_SBREPO" 2>/dev/null)" ]; then
    if [ -n "${SR_INIT_GITCLONE}" ]; then
      log_normal "Cloning SlackBuilds repository $SR_SBREPO from ${SR_INIT_GITCLONE}."
      git clone "${SR_INIT_GITCLONE}" "$SR_SBREPO"
      git fetch -a
      git remote update
      mybranch="${SR_INIT_GITBRANCH:-${SYS_OSVER:-master}}"
      if [ "$(git rev-parse --abbrev-ref HEAD)" != "$mybranch" ]; then
        git checkout -b "$mybranch" -t origin/"$mybranch"
      fi
      log_normal "Finished cloning SlackBuilds repository."
    fi
  elif [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
    # Is git clean, and is the current branch SBo's stable branch?
    log_normal "Checking git ... "
    muck="$(git status -s .)"
    log_done
    currbranch=$(git rev-parse --abbrev-ref HEAD)
    if [ -z "$muck" -a "$currbranch" = "${SYS_OSVER:-master}" ]; then
      if [ -n "$(find "$(git rev-parse --show-toplevel)"/.git/FETCH_HEAD -mtime +1 2>/dev/null)" ]; then
        if [ "$OPT_QUIET" = 'y' ]; then
          log_normal "Updating git ... "
          git fetch --quiet
          git merge --quiet --ff-only origin/"$currbranch"
          log_done
        else
          log_normal "Updating git."
          git fetch
          if [ "$DOCOLOUR"  = 'y' -a -x /usr/bin/unbuffer ]; then
            unbuffer git merge $quietarg --ff-only origin/"$currbranch"
          else
            git merge $quietarg --ff-only origin/"$currbranch"
          fi
          log_normal "Finished updating git."
        fi
      fi
    fi
  fi

  # git: log a summary
  GOTGIT='n'
  if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
    GOTGIT='y'
    [ -n "$(git status -s .)" ] && dirty=' (DIRTY)'
    log_verbose ""
    log_verbose "Git repo:   $SR_SBREPO"
    log_verbose "  branch:   $(git rev-parse --abbrev-ref HEAD)"
    log_verbose "  date:     $(date --date=@"$(git log -n 1 --format=%ct)")"
    log_verbose "  revision: $(git rev-parse HEAD)$dirty"
    log_verbose "  title:    $(git log -n 1 --format=%s)"
    log_normal ""
  fi

fi

# Changelog:
CHANGELOG="$SR_PKGREPO"/.changelog
if [ -s "$CHANGELOG" ]; then
  log_important "Continuing changelog from previous run."
  log_always ""
else
  mkdir -p "$(basename "$CHANGELOG")"
  > "$CHANGELOG"
fi

declare -A KEEPINSTALLED
# Warn about already installed packages (using package tag)
if [ -n "$SR_TAG" ] && [ "$OPT_INSTALL" != 'y' ] && [ "$CMD" != 'remove' ]; then
  for pkg in /var/log/packages/*"$SR_TAG"; do
    if [ -f "$pkg" ]; then
      pkgid="${pkg##*/}"
      [ "${#KEEPINSTALLED[@]}" = 0 ] && log_warning "Packages with tag $SR_TAG are already installed"
      log_normal "  $pkgid"
      KEEPINSTALLED[${pkgid%-*-*-*}]="$pkgid"
    fi
  done
fi

#-------------------------------------------------------------------------------
# Main loop
#-------------------------------------------------------------------------------

if [ $# = 0 ]; then
  if [ "$CMD" = 'update' ]; then
    # update mode with no args => process everything in the package repo
    set -- "$SR_PKGREPO"
  else
    # other modes with no args => process everything in the SlackBuilds repo
    set -- "$SR_SBREPO"
  fi
fi

BLAME="$(basename "$0")"
while [ $# != 0 ]; do
  arg="$1"
  shift
  unset PARSEDLIST UNPARSEDLIST
  if [ "$CMD" = 'build' -o "$CMD" = 'rebuild' -o "$CMD" = 'revert' ]; then
    parse_args -s "$arg"
    [ $? != 0 ] && continue
  else # 'update' or 'remove'
    parse_args -p "$arg"
    [ $? != 0 ] && continue
  fi
  set -- "${UNPARSEDLIST[@]}" "$@"
  # Note that we set the variable $ITEMID (upper case) so that other functions
  # called recursively (which get $itemid as an argument) can test whether they
  # are dealing with the top level item.
  for ITEMID in "${PARSEDLIST[@]}"; do
    log_start "$ITEMID"
    # Commands are extensible, just put a script defining CMD_command() into functions.d/
    cmdfunction="${CMD}_command"
    if [ "$(type -t "$cmdfunction")" = 'function' ]; then
      eval "${CMD}_command" "$ITEMID"
    else
      log_error "$(basename "$0"): Unrecognised CMD = $CMD"
      exit 4
    fi
  done
done

#-------------------------------------------------------------------------------
# Print a summary of what happened
#-------------------------------------------------------------------------------

log_start "SUMMARY"
log_always "Logfile:     $MAINLOG"
secs=$(( $(date +%s) - starttime ))
h=$(( secs / 3600 )); m=$(( ( secs / 60) % 60 )); s=$(( secs % 60 ))
log_normal "Runtime:     ${h}h ${m}m ${s}s"

if [ "$OPT_DRY_RUN" = 'y' ]; then
  OKLIST=( $(printf '%s\n' "${OKLIST[@]}" | sort -u) )
  okcount="${#OKLIST[@]}"
  log_always "Dry run OK:  $okcount"
  [ "$OPT_QUIET" != 'y' -a "$okcount" != 0 ] && printf '  %s\n' "${OKLIST[@]}"
else
  if [ "$CMD" = 'build' ] || [ "$CMD" = 'rebuild' ] || [ "$CMD" = 'update' ]; then
    log_always "Added:       $(grep -c ': Added'   "$CHANGELOG")"
    [ "$OPT_QUIET" != 'y' ] && \
      grep ': Added'    "$CHANGELOG" | sed -e 's/^/  /' -e 's/:.*//' | sort
    log_always "Updated:     $(grep -c ': Updated' "$CHANGELOG")"
    [ "$OPT_QUIET" != 'y' ] && \
      grep ': Updated'  "$CHANGELOG" | sed -e 's/^/  /' -e 's/:.*//' | sort
    log_always "Rebuilt:     $(grep -c ': Rebuilt' "$CHANGELOG")"
    [ "$OPT_QUIET" != 'y' ] && \
      grep ': Rebuilt'  "$CHANGELOG" | sed -e 's/^/  /' -e 's/:.*//' | sort
  fi
  if [ "$CMD" = 'update' ] || [ "$CMD" = 'remove' ]; then
    log_always "Removed:     $(grep -c ': Removed' "$CHANGELOG")"
    [ "$OPT_QUIET" != 'y' ] && \
      grep ': Removed'  "$CHANGELOG" | sed -e 's/^/  /' -e 's/:.*//' | sort
  fi
  if [ "$CMD" = 'revert' ]; then
    log_always "Reverted:    $(grep -c ': Reverted' "$CHANGELOG")"
    [ "$OPT_QUIET" != 'y' ] && \
      grep ': Reverted' "$CHANGELOG" | sed -e 's/^/  /' -e 's/:.*//' | sort
  fi
fi

SKIPPEDLIST=( $(printf '%s\n' "${SKIPPEDLIST[@]}" | sort -u) )
skippedcount="${#SKIPPEDLIST[@]}"
if [ "$skippedcount" != 0 ]; then
  log_always "Skipped:     $skippedcount"
  [ "$OPT_QUIET" != 'y' ] && printf '  %s\n' "${SKIPPEDLIST[@]}"
fi
UNSUPPORTEDLIST=( $(printf '%s\n' "${UNSUPPORTEDLIST[@]}" | sort -u) )
unsupportedcount="${#UNSUPPORTEDLIST[@]}"
if [ "$unsupportedcount" != 0 ]; then
  log_always "Unsupported: $unsupportedcount"
  [ "$OPT_QUIET" != 'y' ] && printf '  %s\n' "${UNSUPPORTEDLIST[@]}"
fi
FAILEDLIST=( $(printf '%s\n' "${FAILEDLIST[@]}" | sort -u) )
failedcount="${#FAILEDLIST[@]}"
if [ "$failedcount" != 0 ]; then
  log_always "Failed:      $failedcount"
  [ "$OPT_QUIET" != 'y' ] && printf '  %s\n' "${FAILEDLIST[@]}"
fi
ABORTEDLIST=( $(printf '%s\n' "${ABORTEDLIST[@]}" | sort -u) )
abortedcount="${#ABORTEDLIST[@]}"
if [ "$abortedcount" != 0 ]; then
  log_always "Aborted:     $abortedcount"
  [ "$OPT_QUIET" != 'y' ] && printf '  %s\n' "${ABORTEDLIST[@]}"
fi
uniquewarnings=()
[ "${#WARNINGLIST[@]}" != 0 ] && while read warning; do uniquewarnings+=( "$warning" ); done < <(printf '%s\n' "${WARNINGLIST[@]}" | sort -u )
warningcount="${#uniquewarnings[@]}"
if [ "$warningcount" != 0 ]; then
  log_always "Warnings:    $warningcount"
  [ "$OPT_QUIET" != 'y' ] && printf '  %s\n' "${uniquewarnings[@]}"
fi

#-------------------------------------------------------------------------------
# Package repository maintenance: gen_repos_files.sh
#-------------------------------------------------------------------------------

genrepstat=0
if [ "$OPT_DRY_RUN" != 'y' -a -s "$CHANGELOG" ]; then
  if [ "$SR_USE_GENREPOS" = 1 ]; then
    if [ -z "$SR_RSS_UUID" ]; then
      log_error "Please set RSS_UUID in $repoconf"
      genrepstat=9
    else
      log_start "gen_repos_files.sh"
      # 'man sort' says an in-place sort is ok, so let's be lazy :-)
      sort -o "$CHANGELOG" "$CHANGELOG"
      REPOSROOT="$SR_REPOSROOT" REPOSOWNER="$SR_REPOSOWNER" REPOSOWNERGPG="$SR_REPOSOWNERGPG" DL_URL="$SR_DL_URL" \
      RSS_TITLE="$SR_RSS_TITLE" RSS_ICON="$SR_RSS_ICON" RSS_LINK="$SR_RSS_LINK" RSS_CLURL="$SR_RSS_CLURL" \
      RSS_DESCRIPTION="$SR_RSS_DESCRIPTION" RSS_FEEDMAX="$SR_RSS_FEEDMAX" RSS_UUID="$SR_RSS_UUID" \
      GPGBIN="$SR_GPGBIN" USE_GPGAGENT="$SR_USE_GPGAGENT" FOR_SLAPTGET="$SR_FOR_SLAPTGET" \
      FOLLOW_SYMLINKS="$SR_FOLLOW_SYMLINKS" REPO_SUBDIRS="$SR_REPO_SUBDIRS" \
      sh /usr/libexec/"$(basename "$0")"/gen_repos_files.sh -l "$CHANGELOG"
      genrepstat=$?
      [ "$genrepstat" != 0 ] && log_error "gen_repos_files.sh failed -- changelog retained"
      log_normal ""
      log_important "Finished gen_repos_files.sh at $(date +%T)"
    fi
  fi
fi

#-------------------------------------------------------------------------------

log_normal ""

[ "$genrepstat" = 0 ] && rm -f "$CHANGELOG"
[ "$OPT_KEEP_TMP" != 'y' ] && rm -rf "$DRYREPO" "$MYTMPDIR"
exit_cleanup

exit 0
