#!/bin/bash
#-------------------------------------------------------------------------------
# slackrepo - Automated SlackBuilding from git repo into package repo,
#             for more details see /usr/doc/slackrepo-*/HOWTO
#
# Copyright 2014 David Spencer, Baildon, West Yorkshire, U.K.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#-------------------------------------------------------------------------------

function print_usage
{
  echo 'Usage:'
  echo '  slackrepo add     [--repo=ID] [item...]'
  echo '  slackrepo rebuild [--repo=ID] [item...]'
  echo '  slackrepo remove  [--repo=ID] item...'
  echo '  slackrepo update  [--repo=ID] [--dry-run ] [item...]'
  echo '  slackrepo update  [--repo=ID] --apply[=file]'
  return
}

[ $# = 0 ] && { print_usage; exit 0; }

starttime=$(date +%s)

#-------------------------------------------------------------------------------
# Mode and control args
#-------------------------------------------------------------------------------

PROCMODE=''
OPT_TEST='n'
OPT_DRYRUN='n'
OPT_APPLY='n'
OPT_VERBOSE='n'
OPT_QUIET='n'

while [ $# != 0 ]; do
  case "$1" in
    # we'll accept add/rebuild/update/remove with or without '--'
    add | --add )
      [ -n "$PROCMODE" ] && { print_usage; exit 3; }
      PROCMODE='add'
      shift; continue ;;
    rebuild | --rebuild )
      [ -n "$PROCMODE" ] && { print_usage; exit 3; }
      PROCMODE='rebuild'
      shift; continue ;;
    update | --update )
      [ -n "$PROCMODE" ] && { print_usage; exit 3; }
      PROCMODE='update'
      shift; continue ;;
    remove | --remove )
      [ -n "$PROCMODE" ] && { print_usage; exit 3; }
      PROCMODE='remove'
      shift; continue ;;
    --repo=* )
      SR_REPO=$(echo "$1" | sed 's/^--repo=//')
      shift; continue ;;
    --verbose | -v )
      OPT_VERBOSE='y'; OPT_QUIET='n'
      shift; continue ;;
    --quiet | -q )
      OPT_QUIET='y'; OPT_VERBOSE='n'
      shift; continue ;;
    --test )
      OPT_TEST='y'
      shift; continue ;;
    --dry-run )
      # --dry-run is incompatible with --apply
      [ "$OPT_APPLY" = 'y' ] && { print_usage; exit 3; }
      OPT_DRYRUN='y'
      shift; continue ;;
    --apply=* )
      # --apply is incompatible with --dry-run
      [ "$OPT_DRYRUN" = 'y' ] && { print_usage; exit 3; }
      OPT_APPLY='y'
      SR_UPDATEFILE="$(echo "$1" | sed 's/^--apply=//')"
      shift; continue ;;
    --apply )
      # --apply is incompatible with --dry-run
      [ "$OPT_DRYRUN" = 'y' ] && { print_usage; exit 3; }
      OPT_APPLY='y'
      SR_UPDATEFILE=""  # fill this in later when we've read the config
      shift; continue ;;
    --* )
      print_usage; exit 3 ;;
    * )
      break ;;
  esac
done

[ -z "$PROCMODE" ] && \
  { print_usage; exit 3; }
[ "$OPT_APPLY" = 'y' -a "$PROCMODE" != 'update' ] && \
  { print_usage; exit 3; }

#-------------------------------------------------------------------------------
# Startup
#-------------------------------------------------------------------------------

# Ensure ctrl-c exits the whole thing, not just a random subshell
trap "exit 2" SIGINT SIGQUIT SIGTERM

# Get the support functions
for f in /usr/libexec/slackrepo/functions.d/*functions.sh; do
  if [ -x $f ]; then
    . $f
  fi
done

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------

# Set the repo ID: from control arg, or env...
SR_REPO="${SR_REPO:-$REPO}"
# ... or repo.default config file ...
repodefault="/etc/slackrepo/repo.default"
[ -f $repodefault ] && { set -e; . $repodefault; set +e; }
# ... or just fall back to SBo.
[ -z "${SR_REPO:=$REPO}" ] && SR_REPO="SBo"

# Set config variables from environment:
varlist="GITREPO BRANCH UPSTREAM STYLE SRCREPO PKGREPO TAG \
         HINTS LOGDIR TMP ARCH PKGTYPE NUMJOBS USE_GENREPOS"
# We'll prefix all these with SR_ to stop SlackBuilds picking them up
for envvar in $varlist ; do
  myvar="SR_$envvar"
  eval $myvar="${!envvar}"
done
# Read the config files:
repoconf="/etc/slackrepo/repo_${SR_REPO}.conf"
##### and ~/.slackrepo
if [ -f "$repoconf" ]; then
  set -e; . "$repoconf"; set +e
else
  echo "Error: repo configuration file not found: $repoconf"; exit 2
fi
# Backfill the SR_ variables from config and unset the config variables
for confvar in $varlist ; do
  myvar="SR_$confvar"
  [ -z "${!myvar}" ] && eval $myvar="${!confvar}"
  eval unset $confvar
done

# This is for things that SR_TMP wouldn't be good for (we clean SR_TMP)
TMPDIR=${TMPDIR:-/tmp}

# Do this now so we can log the config:
mkdir -p $SR_LOGDIR
SR_LOGFILE=$SR_LOGDIR/slackrepo_$(date '+%F_%T').log
> $SR_LOGFILE

# If arch not set, work it out
if [ -z "$SR_ARCH" ]; then
  case "$( uname -m )" in
    i?86) SR_ARCH=i486 ;;
    arm*) SR_ARCH=arm ;;
       *) SR_ARCH=$( uname -m ) ;;
  esac
fi

# Find out the version of Slackware (we'll also need this later)
[ -f /etc/slackware-version ] || { log_error "$(basename $0): /etc/slackware-version not found"; exit 4; }
SLACKVER="$(cat /etc/slackware-version | sed 's/^Slackware //')"
if [ -z "$SR_BRANCH" ]; then
  SR_BRANCH="$SLACKVER"
fi

# For update mode:
[ -z "$SR_UPDATEFILE" ] && SR_UPDATEFILE="$SR_LOGDIR/slackrepo_dryrun.log"

[ "$OPT_VERBOSE" = 'y' ] && echo ""
log_verbose "Configuration:"
[ "$OPT_VERBOSE" = 'y' ] && log_verbose "  --verbose"
[ "$OPT_QUIET" = 'y'   ] && log_verbose "  --quiet"
log_verbose "  --repo=$SR_REPO"
log_verbose "  --$PROCMODE"
[ "$OPT_DRYRUN" = 'y' ] && log_verbose "  --dry-run"
[ "$OPT_APPLY"  = 'y' ] && log_verbose "  --apply=$SR_UPDATEFILE"
for var in $varlist; do
  myvar="SR_$var"
  log_verbose "  $var='${!myvar}'"
done
[ "$OPT_VERBOSE" = 'y' ] && echo ""

[ -d "$SR_GITREPO" ] || { log_normal "$(basename $0): Creating git repository: $SR_GITREPO"     ; mkdir -p "$SR_GITREPO" ; }
[ -d "$SR_SRCREPO" ] || { log_normal "$(basename $0): Creating source repository: $SR_SRCREPO"  ; mkdir -p "$SR_SRCREPO" ; }
[ -d "$SR_PKGREPO" ] || { log_normal "$(basename $0): Creating package repository: $SR_PKGREPO" ; mkdir -p "$SR_PKGREPO" ; }
[ -d "$SR_LOGDIR" ]  || { log_normal "$(basename $0): Creating log directory: $SR_LOGDIR"       ; mkdir -p "$SR_LOGDIR"  ; }
[ -d "$SR_HINTS" ]   || { log_normal "$(basename $0): Creating hints directory: $SR_HINTS"      ; mkdir -p "$SR_HINTS"   ; }

#-------------------------------------------------------------------------------
# Initialisation
#-------------------------------------------------------------------------------

# Associative arrays to store stuff from .info files:
declare -A INFOVERSION INFOREQUIRES INFODOWNLIST INFOMD5LIST
# and to store dependency, revision and other stuff:
declare -A SRCDIR GITREV GITDIRTY DEPCACHE REVCACHE

# How clean is the system?
if [ -n "$SR_TAG" ]; then
  installed=$(ls /var/log/packages/*$SR_TAG 2>/dev/null)
  if [ -n "$installed" ]; then
    for pkg in $installed; do
      log_warning "$(basename $pkg): package is already installed"
    done
  fi
fi

SR_TMP=${SR_TMP:-/tmp/SBo}
log_normal "Removing $SR_TMP/* ..."
# really really don't want the next line to go badly ;-)
[ -n "$SR_TMP" ] && rm -rf "${SR_TMP}"/*

mkdir -p $SR_TMP $SR_SRCREPO $SR_PKGREPO
if [ "$OPT_DRYRUN" = 'y' ]; then
  SR_DRYREPO=$SR_TMP/dryrun_$SR_REPO
  rm -rf $SR_DRYREPO
  mkdir -p $SR_DRYREPO
fi

SR_CHANGELOG=$TMPDIR/sr_changelog.tmp
# Don't clear the changelog, it may contain changes from a previous interrupted
# run, and gen_repos_files.sh can catch up with them at the end.
touch $SR_CHANGELOG

if [ "$OPT_DRYRUN" = 'y' -a "$PROCMODE" = "update" ]; then
  >$SR_UPDATEFILE
fi

log_normal "Initialising git ..."
if [ -d $SR_GITREPO/.git ]; then
  cd $SR_GITREPO
  ###### This bit needs a redo
  ###### don't update if OPT_APPLY is happening
  ###### git checkout -f $SR_BRANCH
  if [ -n "$SR_UPSTREAM" -a "$SR_BRANCH" = "$SLACKVER" ]; then
    if [ -n "$(find $SR_GITREPO/.git/FETCH_HEAD -mtime +1 2>/dev/null)" ]; then
      git fetch -a
      git merge --ff-only origin/$SR_BRANCH
    fi
  fi
else
  mkdir -p $SR_GITREPO
  log_normal "Git repository $SR_GITREPO does not exist; creating it..."
  git clone "$SR_UPSTREAM" "$SR_GITREPO"
  cd "$SR_GITREPO"
  git fetch -a
  git remote update
  git checkout -b "$SR_BRANCH" -t origin/"$SR_BRANCH"
fi
log_normal "Finished initialising git."

#-------------------------------------------------------------------------------
# Main loop
#-------------------------------------------------------------------------------

OKLIST=''
SKIPPEDLIST=''
FAILEDLIST=''
ABORTEDLIST=''

if [ "$PROCMODE" = 'update' ]; then
  if [ "$OPT_APPLY" = 'y' ]; then
    # update apply => throw away all the args, get the stored arg list
    set -- $(cat "$SR_UPDATEFILE" | cut -f1 -d' ')
  elif [ $# = 0 ]; then
    # update mode with no args => process everything in the package repo
    set -- $(cd $SR_PKGREPO; find * -maxdepth 0 -type d 2>/dev/null)
  fi
elif [ $# = 0 ]; then
  if [ "$PROCMODE" = 'remove' ]; then
    # remove mode with no args => do nothing
    echo "Usage: slackrepo remove [--repo=ID] item..."
    echo "In remove mode, you *must* specify the items to be removed."
    exit 3
  else
    # other modes with no args => process everything in the git repo
    set -- $(cd $SR_GITREPO; find * -maxdepth 0 -type d 2>/dev/null)
  fi
fi

log_normal "Preparing list of items..."
BLAME="$(basename $0)"
parse_items $*
# ignore status - we'll just process the items that were ok
unset BLAME

PROCTOTAL=0
for ITEMPATH in $ITEMLIST; do
  PROCTOTAL=$(( $PROCTOTAL + 1 ))
  process_item $ITEMPATH
done

#-------------------------------------------------------------------------------
# Print a summary of what happened
#-------------------------------------------------------------------------------

echo ""
echo "==============================================================================="
echo "! SUMMARY                                                            $(date +%T) !"
echo "==============================================================================="
echo ""
secs=$(( $(date +%s) - $starttime ))
h=$(( $secs / 3600 )); m=$(( ( $secs / 60) % 60 )); s=$(( $secs % 60 ))
echo "Time:       ${h}h ${m}m ${s}s"
echo "Processed:  $PROCTOTAL"

if [ "$PROCMODE" = 'update' -a "$OPT_DRYRUN" = 'y' ]; then
  sort -u -k 1,1 -o $SR_UPDATEFILE $SR_UPDATEFILE
  cat $SR_UPDATEFILE
else
  if [ "$OPT_DRYRUN" = 'y' ]; then
    OKLIST="$(echo -n $OKLIST | sed -e "s/ /\n  /g" -e 's/^ */  /' | sort -u)"
    echo "Dry run OK: $(echo -n $OKLIST | wc -w)"
    [ "$OPT_VERBOSE" = 'y' -a -n "$OKLIST" ] && echo "$OKLIST"
  else
    echo "Added:      $(grep ': Added'   $SR_CHANGELOG | wc -l)"
    [ "$OPT_VERBOSE" = 'y' ] && \
      grep ': Added'   $SR_CHANGELOG | sed -e 's/^/  /' -e 's/:.*//' | sort
    echo "Updated:    $(grep ': Updated' $SR_CHANGELOG | wc -l)"
    [ "$OPT_VERBOSE" = 'y' ] && \
      grep ': Updated' $SR_CHANGELOG | sed -e 's/^/  /' -e 's/:.*//' | sort
    echo "Rebuilt:    $(grep ': Rebuilt' $SR_CHANGELOG | wc -l)"
    [ "$OPT_VERBOSE" = 'y' ] && \
      grep ': Rebuilt' $SR_CHANGELOG | sed -e 's/^/  /' -e 's/:.*//' | sort
    echo "Removed:    $(grep ': Removed' $SR_CHANGELOG | wc -l)"
    [ "$OPT_VERBOSE" = 'y' ] && \
      grep ': Removed' $SR_CHANGELOG | sed -e 's/^/  /' -e 's/:.*//' | sort
  fi
  SKIPPEDLIST="$(echo -n $SKIPPEDLIST | sed -e "s/ /\n  /g" -e 's/^ */  /' | sort -u)"
  echo "Skipped:    $(echo -n $SKIPPEDLIST | wc -w)"
  [ "$OPT_VERBOSE" = 'y' -a -n "$SKIPPEDLIST" ] && echo "$SKIPPEDLIST"
  FAILEDLIST="$(echo -n $FAILEDLIST   | sed -e "s/ /\n  /g" -e 's/^ */  /' | sort -u)"
  echo "Failed:     $(echo -n $FAILEDLIST | wc -w)"
  [ "$OPT_VERBOSE" = 'y' -a -n "$FAILEDLIST" ] && echo "$FAILEDLIST"
  ABORTEDLIST="$(echo -n $ABORTEDLIST | sed -e "s/ /\n  /g" -e 's/^ */  /' | sort -u)"
  echo "Aborted:    $(echo -n $ABORTEDLIST | wc -w)"
  [ "$OPT_VERBOSE" = 'y' -a -n "$ABORTEDLIST" ] && echo "$ABORTEDLIST"
fi
WARNCOUNT=$(grep '^WARNING: ' $SR_LOGFILE | wc -l)
echo "Warnings:   $WARNCOUNT"
[ "$OPT_VERBOSE" = 'y' ] && grep '^WARNING: ' $SR_LOGFILE | sed 's/^WARNING: /  /'

#-------------------------------------------------------------------------------
# Package repository maintenance: gen_repos_files.sh
#-------------------------------------------------------------------------------

if [ "$OPT_DRYRUN" != 'y' -a -s $SR_CHANGELOG ]; then
  rcfile=~/.genreprc
  [ -f $rcfile ] && { set -e; . $rcfile; set +e; }
  if [ "$SR_USE_GENREPOS" = 1 ]; then
    echo ""
    log_start "gen_repos_files.sh"
    # 'man sort' says an in-place sort is ok, so let's be lazy :-)
    sort -o $SR_CHANGELOG $SR_CHANGELOG
    if [ "$RSS_UUID" = '' ]; then
      setrssuuid="RSS_UUID=\"$(uuidgen -t)\""
      log_normal "Note: setting $setrssuuid in $rcfile"
      echo "$setrssuuid" >> $rcfile
      eval $setrssuuid
    fi
    REPOSROOT="$REPOSROOT" REPOSOWNER="$REPOSOWNER" REPOSOWNERGPG="$REPOSOWNERGPG" DL_URL="$DL_URL" \
    RSS_TITLE="$RSS_TITLE" RSS_ICON="$RSS_ICON" RSS_LINK="$RSS_LINK" RSS_CLURL="$RSS_CLURL" \
    RSS_DESCRIPTION="$RSS_DESCRIPTION" RSS_FEEDMAX="$RSS_FEEDMAX" RSS_UUID="$RSS_UUID" \
    GPGBIN="$GPGBIN" USE_GPGAGENT="$USE_GPGAGENT" FOR_SLAPTGET="$FOR_SLAPTGET" \
    FOLLOW_SYMLINKS="$FOLLOW_SYMLINKS" REPO_SUBDIRS="$REPO_SUBDIRS" \
    sh /usr/libexec/slackrepo/gen_repos_files.sh -l $SR_CHANGELOG | tee -a $SR_LOGFILE
    ###### extra control args to run faster?
    echo ""
    log_important "Finished gen_repos_files.sh at $(date +%T)"
  fi
fi

#-------------------------------------------------------------------------------

rm -f \
  $SR_CHANGELOG \
  $SR_UPDATEFILE

echo ""
exit 0
