#!/bin/bash
#-------------------------------------------------------------------------------
# SBoggit - automated clean (fsvo ;) package building from SlackBuilds.org git
#
# Copyright 2013 David Spencer, Baildon, West Yorkshire, U.K.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#-------------------------------------------------------------------------------

if [ $# = 0 ]; then
  echo 'Usage: SBoggit option|category|item ...'
  echo '  --install      install built packages'
  echo '  --no-install   do not install built packages [default]'
  echo '  --rebuild      rebuild packages that are up-to-date'
  echo '  --no-rebuild   do not rebuild packages that are up-to-date [default]'
  echo '  --clean-repos  remove dead packages from source cache and output repo'
  exit 0
fi

#-------------------------------------------------------------------------------
# Optional environment variables --
#   SBOGGIT - base directory, default /SBoggit
#   TAG - default _SBoggit
#   SBOREPO - local SBo git repo base, default $SBOGGIT/slackbuilds
#   GITBRANCH  - git branch to build in, default as follows:
gitstable='14.1'
#
# Possible hints in $SBOGGIT/hints/ --
#   prg.skipme - don't build prg (.skipme file contains optional comment for display/log)
#   prg.readmedeps - dependencies to substitute for %README% in REQUIRES="..."
#   prg.options - options to supply to the SlackBuild
#   prg.moredeps - more dependencies, eg. to support options
#   prg.uidgid - groupadd and useradd commands needed for prg
#   prg.makej1 - set MAKEFLAGS='j1' during build
#   prg.tar.gz - SBo submission-style tarball to replace prg/* before build
#   prg.cleanup - script to run after prg is uninstalled
#   prg.answers - answers to questions that may be asked when the SlackBuild is run
#
# This script is intended to be run on a clean, full installation of Slackware.
#   Start with a full installation of Slackware.
#   Do not install any other packages.
#   Do not use the system for anything else.
#   Do a complete reinstall of Slackware after you have finished.
#
# Builds are not 100% clean and not 100% repeatable.  Each build is done as a
#   flat list of deps.  Each dep not already in $OUTREPO is built in the context
#   of the list, so it is possible for a package to pick up an unintended
#   dependency.  If one dep in the list is out of date, the remainder of the
#   list is rebuilt.  Git revision hashes are recorded in $OUTPUT, and rebuilds
#   are triggered when the hash in SBOREPO differs.
#
# The local git branch will be brutally cleaned on startup.  You have been
#   warned!  If no git repo is present, it will be cloned from SlackBuilds.org.
#   If the branch is '14.1' or 'master', it will be updated by fast forward
#   (if possible) from origin/master (which is probably SBo, but could be a
#   local mirror) if it is more than one day since the last update.
#-------------------------------------------------------------------------------

export SBOGGIT=${SBOGGIT:-/SBoggit}
export TAG=${TAG:-_SBoggit}
export SBOREPO=${SBOREPO:-$SBOGGIT/slackbuilds}
export GITBRANCH=${GITBRANCH:-$gitstable}

[ -d $SBOGGIT ] || { echo "ERROR: directory $SBOGGIT not found"; exit 1; }

export HINTS=$SBOGGIT/hints
export SRCCACHE=$SBOGGIT/src
export OUTREPO=$SBOGGIT/output
export TMP=$SBOGGIT/tmp
export LOGDIR=$SBOGGIT/logs-$(date +%Y%m%d_%H%M)

if [ -z "$SLKARCH" ]; then
  case "$( uname -m )" in
    i?86) SLKARCH=i486 ;;
    arm*) SLKARCH=arm ;;
       *) SLKARCH=$( uname -m ) ;;
  esac
fi

#-------------------------------------------------------------------------------
# Initialisation
#-------------------------------------------------------------------------------

for f in functions.d/*functions.sh; do
  if [ -x $f ]; then
    . $f
  fi
done

echo "Removing $TMP ..."
rm -rf $TMP
mkdir -p $HINTS $OUTREPO $TMP $SRCCACHE
mkdir -p $LOGDIR/PASS $LOGDIR/FAIL
rm -f $LOGDIR/PASSLIST $LOGDIR/FAILLIST $LOGDIR/READMELIST
touch $LOGDIR/PASSLIST $LOGDIR/FAILLIST $LOGDIR/READMELIST

if [ -n "$(ls /var/log/packages/*$TAG 2>/dev/null)" ]; then
  echo "Removing all $TAG packages ..."
  removepkg /var/log/packages/*$TAG
  echo ""
fi

echo "Initialising git ..."
if [ -d $SBOREPO ]; then
  cd $SBOREPO
  # This bit is going to be nasty, brutish and short :P
  git checkout -f $GITBRANCH
  git reset --hard
  git clean -xdf
  if [ "$GITBRANCH" = 'master' -o "$GITBRANCH" = $gitstable ]; then
    if [ -n "$(find $SBOREPO/.git/FETCH_HEAD -mtime +1)" ]; then
      git fetch -a
      git merge --ff-only origin/$GITBRANCH
    fi
  fi
else
  echo "$SBOREPO does not exist"
  git clone git://slackbuilds.org/slackbuilds.git $SBOREPO
  cd $SBOREPO
  git fetch -a
  git remote update
  git checkout -b $gitstable -t origin/$gitstable
fi
echo "Finished initialising git."
echo ""

#-------------------------------------------------------------------------------
# Main loop
#-------------------------------------------------------------------------------

INSTALLFLAG='n'
REBUILDFLAG='n'

while [ $# != 0 ]; do

  ARG=${1%%/}; shift

  case "$ARG" in
  --install)
      INSTALLFLAG='y'
      continue
    ;;
  --no-install)
      INSTALLFLAG='n'
      continue
      ;;
  --rebuild)
      REBUILDFLAG='y'
      continue
      ;;
  --no-rebuild)
      REBUILDFLAG='n'
      continue
      ;;
  --clean-repos)
      clean_srccache
      clean_outrepo
      continue
      ;;
  esac

  # Check the current argument
  if [ -d $SBOREPO/${ARG##*/} ]; then
    # it's a category: expand it into a list of its items
    set -- $SBOREPO/$ARG/* "$@"
    continue
  fi
  # otherwise, the last component should be an item
  PRG=$(basename ${ARG%%/})
  if [ ! -d $SBOREPO/*/$PRG ]; then
    echo_boxed "ERROR: $PRG is neither a category nor an application"
    continue
  fi
  CATEGORY=$(cd $SBOREPO/*/$PRG/..; basename $(pwd))
  echo_boxed "$CATEGORY/$PRG"

  # Quick check whether the item is unsupported or should be skipped
  if hint_skipme $prg; then
    echo ""
    continue
  elif arch_unsupported $PRG; then
    echo ""
    continue
  fi

  # Work out dependencies (DEPLIST), and then which deps are already up-to-date
  # and can just be installed (INSTLIST) and which deps need to be built (TODOLIST)
  export DEPLIST=""
  dependublaster2000 $PRG
  if [ "$(echo $DEPLIST)" != "$PRG" ]; then
    echo "Package stack for $PRG:" $DEPLIST
  fi
  INSTLIST=""
  TODOLIST=""
  needbuild='n'
  for dep in $DEPLIST; do
    if in_outrepo_and_uptodate $dep; then
      if [ $needbuild = 'y' ]; then
        TODOLIST=$(echo $TODOLIST $dep)
      else
        INSTLIST=$(echo $INSTLIST $dep)
      fi
    else
      # trigger build for all following deps, even if they are already in OUTREPO
      needbuild='y'
      TODOLIST=$(echo $TODOLIST $dep)
    fi
  done

  # Process INSTLIST and TODOLIST
  # If there's nothing in TODOLIST, don't bother installing :D
  if [ "$TODOLIST" != '' ]; then
    if [ "$TODOLIST" != "$PRG" ]; then
      echo "To-do list for $PRG:" $DEPLIST
    fi
    instok='y'
    for instprg in $INSTLIST; do
      install_from_outrepo $instprg
      if [ $? != 0 ]; then
        instok='n'
        [ $instprg != $PRG ] && echo_red "ABORTED $CATEGORY/$PRG"
        break
      fi
    done
    if [ $instok = 'y' ]; then
      for todoprg in $TODOLIST; do
        build_package $todoprg
        if [ $? != 0 ]; then
          [ $todoprg != $PRG ] && echo_red "ABORTED $CATEGORY/$PRG"
          break
        fi
      done
    fi
    echo "-------------------------------------------------------------------------------"
    for instprg in $INSTLIST $TODOLIST; do
      uninstall_package $instprg
    done
  fi
  echo ""

done

exit 0
