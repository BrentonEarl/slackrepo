SLACKREPO HOWTO
---------------

For some important warnings, please see the end of this file.


About Slackrepo
---------------

Slackrepo is a highly automated SlackBuild package builder.  It builds
packages from an input repository of SlackBuilds (for example, a clone
of SlackBuilds.org), and then outputs them to a package repository.

For best results, slackrepo is intended to be run on a "clean" standard
Slackware environment (like a "build box" or a virtual machine), with a
full installation of Slackware and no additional packages (or very few).
You can then use the package repository to install the packages on other
hosts (e.g. with slackpkg+, see below).

Some notable features are:

* automatic updating - revisions of the SlackBuild repository determine
  updates and rebuilds of packages
* clean building - dependencies are built as a 'tree', not a 'queue'
* quality assurance testing - optional tests on the SlackBuild files and
  built packages can be enabled

This is a tool for managing package repositories, not a tool for managing
packages installed on a host.  Except for temporary installations during
builds, slackrepo does not install, upgrade or remove packages on the host
system. For that, you should continue to use pkgtool, installpkg, etc., or
slackpkg+.  For package building, most users will find that the existing
popular tools are much better for their needs: sbopkg, sqg, sbotools,
slacktrack, slack, src2pkg, etc.

Slackrepo is not affiliated with, or endorsed by, SlackBuilds.org or
the Slackware Team.  The author thanks the awesome people behind those
projects for their continuing generosity to the community.



Running Slackrepo
-----------------

Slackrepo runs from the command line.  It is not interactive.  Like other
Slackware package management tools, it should be run as the root user,
for example with 'su -'.  Sources are downloaded on demand (unless already
available in the local cache); a well-functioning network connection is
assumed.

Slackrepo has four modes of operation: build, rebuild, remove, and update.

(1) Build mode:

  slackrepo build [--options] [item...]

In build mode, each specified item in the SlackBuild repository is built
and stored into the package repository if there is no up-to-date package
already stored.  Missing or out-of-date dependencies are also built and
stored into the package repository.  If no items are specified, everything
in the SlackBuild repository is built and stored.

Items can be specified as the name of an individual item (e.g. 'wxPython')
or as an individual item in a category (e.g. 'libraries/wxPython'), or as
an entire category of items (e.g. 'libraries').  Obviously, very large
amounts of storage will be needed if you build entire categories.

(2) Rebuild mode:

  slackrepo rebuild [--options] [item...]

Rebuild mode is like build mode, except that packages already in the package
repository will be rebuilt, even if they are up-to-date.

(3) Remove mode:

  slackrepo remove [--options] item...

In remove mode, each specified item is removed from the package repository.
Also, any cached source files are removed.

(4) Update mode:

  slackrepo update [--options] [item...]

In update mode, each specified package (and its dependencies) in the
package repository is compared to the SlackBuild repository, and built,
rebuilt, or removed, as appropriate.  everything in the package repository
is compared.



Options
-------

--repo=ID

Use the SlackBuild and package repository identified by ID.  The location of
the SlackBuild and package repositories are determined by the configuration
file /etc/slackrepo/repo_ID.conf.  The default repository ID is SBo.

--test

The SlackBuild files and the built packages will be subjected to additional
quality assurance tests.

--dry-run

Builds and rebuilds will be performed, and removals will be notified, but no
changes will be made to the package repository. 

-v, --verbose

Increase the quantity of messages printed on the console during execution.

-q, --quiet

Reduce the quantity of messages printed on the console during execution.



SlackBuilds.org git
-------------------

If no SlackBuild Repository exists when slackrepo starts, it will clone the
SlackBuilds.org git repository, and a local branch '14.1' will be created
that tracks 'origin/14.1' (i.e., the stable branch at SlackBuilds.org).

As a special case, if the local branch is named '14.1' (as above) and is
clean, then when slackrepo starts it will automatically update the local
branch by fast forward (if possible) from its origin, but only if more than
one day has elapsed since the last automatic update.



Dependencies
------------

Dependencies are built and installed automatically, according to the
contents of .info files (REQUIRES="...") and hints.  This is done as a
'tree' of dependencies, not a 'queue', so in some cases dependencies may
be installed and removed multiple times.  Although time consuming, this
is necessary in some cases to produce clean packages for redistribution.

Remember that dependencies on standard Slackware packages are not (and
should not be) listed in .info files and hints, and are not tracked by
slackrepo.



Updates
-------

Updates don't just happen in update mode.  Update mode proactively looks
for packages that are out-of-date, and also removes packages for which the
SlackBuilds no longer exist.  In build mode and in rebuild mode, packages
are updated or rebuilt if required; for example, if a package is being
built, its dependencies will be updated and/or rebuilt if they are
out-of-date.  

A package is out-of-date if --

* the git revision in the directory containing the SlackBuild has changed
  since the package was built
* the directory containing the SlackBuilds has untracked/uncommited files
  (i.e. "git is dirty") and they are newer than the package
* any relevant hint has changed since the package was built
* any of its direct dependencies has been updated since the package was
  built
* the version of Slackware has changed since the package was built

Changes in the SlackBuilds directory, and changes to the relevant hints,
are classified as 'updates', which will cause directly depending items to
be rebuilt.  Other changes are classified as 'rebuilds' and do not cause
depending items to be rebuilt.

For example, ffmpeg depends on x264, and transcode depends on ffmpeg.  If
x264 is updated, ffmpeg will be rebuilt, but transcode will not be rebuilt.
If x264 is rebuilt, ffmpeg will not be rebuilt.  If ffmpeg is updated,
transcode will be rebuilt.

When a package is rebuilt, and when a package is updated but its
version number is unchanged, the BUILD number in the package repository
is always incremented (and the BUILD number in the SlackBuild file is
ignored).



Messages and logging
--------------------

All messages from slackrepo are sent to a log file.  Progress messages are
displayed on the screen.  Control arguments '--verbose' (or '-v') and
'--quiet' (or '-q') can be specified, to increase or decrease the details
that are displayed on the screen.

Detailed output from each build process is sent to an item-specific log
file, but is not displayed on the screen.



Hints
-----

You are encouraged to take full control of the building process by
reviewing, customising and creating 'hints'.  These are small
configuration files that determine the processing of each item,
including options and optional dependencies.  A sample set of hints for
SlackBuilds.org are supplied (in the directory /etc/slackrepo/hints_SBo).

'Hints' for specific packages are set by creating small configuration
files in /etc/slackrepo/hints.  An initial set of hint files for SBo
is supplied, but you are encouraged to review and modify them.

In particular, *please* review the README files of the packages you are
building, and then *please* modify the supplied option and dependency hints
for your own requirements!

The types of hints are as follows --

* prg.options       options to supply to the SlackBuild
* prg.optdeps       optional dependencies, including deps for options
* prg.readmedeps    dependencies to substitute for %README% in REQUIRES="..."
* prg.uidgid        groupadd and useradd commands needed for prg
* prg.md5ignore     don't check source md5sum
* prg.makej1        set MAKEFLAGS='-j1' during build
* prg.skipme        do not build prg
* prg.cleanup       script to run after prg is uninstalled
* prg.no_uninstall  do not uninstall prg
* prg.answers       answers for prompts printed when the SlackBuild is run
* prg.version       attempt to patch .info and .SlackBuild for a new version



Repositories
------------

Multiple repositories are supported.  The Repository ID, e.g. 'SBo',
selects a configuration file, e.g. /etc/slackrepo/slackrepo_SBo.conf, and
the configuration file sets the paths of the SlackBuild repository, the
source repository, the package repository, the hints directory, and the
log directory.  The Repository ID can be specified by the control argument
'--repo=ID', or by the REPO environment variable, or by setting 'REPO=ID'
in the file ~/.slackreporc.  By default, the default default is 'SBo'.

Example showing repository trees for Repository ID 'SBo':

[REPO=SBo] /etc/slackrepo/slackrepo_SBo.conf
            |
[SBREPO]    |--/var/lib/slackrepo/git_SBo/category/item/item.SlackBuild (etc)
[PKGREPO]   |--/var/lib/slackrepo/pkg_SBo/category/item/item-1.0-i486-1_SBo.tgz
[SRCREPO]   |--/var/lib/slackrepo/src_SBo/category/item/item-1.0.tar.gz
            |
[HINTS]     |--/etc/slackrepo/hints_SBo/category/item.options
            |
[LOGDIR]    |--/var/log/slackrepo/log_SBo/category/item.log

Under each of git_SBo, src_SBo and pkg_SBo is a directory for each SBo
category, and under each category directory is a subdirectory for each
item.  Under hints_SBo and log_SBo there are directories for each category,
but the hints and logs are not in subdirectories.



Configuration
-------------

These configuration options are set in /etc/slackrepo/slackrepo_SBo.conf.
They may be redefined by editing that file, or by setting environment
variables, or by creating the file ~/.slackreporc.


Default repo ID:

The following configuration variable 

REPO=SBo
  The default repo ID. This determines the configuration file
  /etc/slackrepo/slackrepo_ID.conf from which other configuration
  variables will be read.  This can be set only in ~/.slackreporc,
  but can be overridden by an environment variable or by the
  command line option '--repo=ID'.


Repository filestore locations:

SBREPO=/var/lib/slackrepo/git_SBo
  Location of SlackBuilds repository

PKGREPO=/var/lib/slackrepo/pkg_SBo
  Location of package repository

SRCREPO=/var/lib/slackrepo/src_SBo
  Location of downloaded source repository

HINTS=/etc/slackrepo/hints_SBo
  Location of 'hints' (see HINTS section above)

LOGDIR=/var/log/slackrepo/log_SBo
  Location of log files

TMP=/tmp/SBo
  Temporary directory


Building packages:

ARCH=''
  Arch for built packages (normally determined from the build host)

TAG=_SBo
  Tag for built packages (PLEASE CHANGE THIS if your packages will be
  publicly available)

PKGTYPE=tgz
  Package compression type. Valid values are: tgz, txz, tbz, tlz

NUMJOBS=''
  Number of make jobs to set in MAKEFLAGS (e.g., '-j2').
  Leave blank to have this automatically determined as one more than
  the number of processors on the build host.


Calling gen_repos_files.sh:

USE_GENREPOS='0'
  Whether to use gen_repos_files.sh (to enable it, change 0 to 1)

If you enable gen_repos_files.sh, you *must* set correct values for its
configuration options in /etc/slackrepo/slackrepo_ID.conf.  However, if
you already use gen_repos_files.sh, it will still read your existing
~/.genreprc file.



gen_repos_files.sh and slackpkg+
--------------------------------

Optionally, Eric Hameleers' gen_repos_files.sh (which is included) can
be used to maintain additional package metadata in the package repository,
such as signing and a changelog.  Thanks, Eric!  To use it, you will
need to set a few configuration values in the repository's configuration
file /etc/slackrepo/slackrepo_SBo.conf (but, if you use gen_repos_files.sh
already, your existing ~/.genreprc config file will be read).

The repositories created by slackrepo are suitable for use with slackpkg+
(http://slakfinder.org/slackpkg+.html), which is a plugin for slackpkg
that allows you to use slackpkg to manage packages from third party
repositories.  Thanks, Matteo!

To make your slackrepo+ package repositories accessible, you will need to
export them as a shared directory (e.g. NFS or a Virtualbox shared folder),
or perhaps serve them via a local webserver on the build host (e.g. by
setting PKGREPO=/var/www/htdocs/pkg_SBo in /etc/slackrepo/slackrepo_SBo.conf).

For example, on a client system, to configure slackpkg+ to use a shared
directory, /etc/slackpkg/slackpkgplus.conf would have something like this:

  REPOPLUS=( SBo slackpkgplus restricted alienbob )
  MIRRORPLUS['SBo']=dir://repositories/pkg_SBo/

Or to configure slackpkg+ to use a web-served repository on the build
host, you would have something like this:

  REPOPLUS=( SBo slackpkgplus restricted alienbob )
  MIRRORPLUS['SBo']=http://buildhost/pkg_SBo/

If you choose not to sign your packages with gen_repos_files.sh, you will
need to tell slackpkg+ not to check GPG signatures.  There are two ways
of doing this: (1) set "CHECKGPG=off" in /etc/slackpkg/slackpkg.conf, or
(2) use the slackpkg control argument '-checkgpg=off'.

Note that slackpkg+ will not install newly added packages from your own
package repository when you run 'slackpkg install-new'.  This command
searches for new packages ONLY in the official Slackware repository.  To
install specific packages in your own repository you can use

  slackpkg install <packagename>

or to install and upgrade everything in your own repository, you can use

  slackpkg add <reponame>



WARNINGS
--------

(1) BEWARE! This is experimental software! Use with caution!

(2) After it builds or tests a package, slackrepo uninstalls the package
and all its dependencies, and it aggressively removes files from /etc that
Slackware's own tools would normally leave in place.  This will cause serious
damage if you attempt to rebuild a package that is already installed and in
active use (for example, if you use slackrepo to test slackrepo, or if you
rebuild nvidia-driver on a system that uses nvidia-driver).  You can avoid
this by creating a prg.no_uninstall hint file, and then the package will
not be uninstalled.  Just create an empty file; its contents are not read.
