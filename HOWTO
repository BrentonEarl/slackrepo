SLACKREPO HOWTO
---------------

For some important warnings, please see the end of this file.

Slackrepo is a highly automated SlackBuild package builder.  Its emphasis
is on clean building, updating and testing.  It builds packages from an
input repository of SlackBuilds (for example, a clone of SlackBuilds.org),
and then stores them in a package repository.  Slackrepo tracks changes
in the upstream repository, adding, updating and removing packages as
required, including any rebuilds for updated dependencies.  Optionally,
it can perform quality assurance tests on the SlackBuild files and on the
built packages.

This is a tool for managing package repositories, not a tool for managing
packages installed on a host.  Except for temporary installations during
builds, slackrepo does not install, upgrade or remove packages on the host
system. For that, you should continue to use pkgtool, installpkg, etc., or
slackpkg+.  For package building, most users will find that the existing
popular tools are much better for their needs: sbopkg, sqg, sbotools,
slacktrack, slack, src2pkg, etc.

For best results, slackrepo is intended to be run on a "clean" standard
Slackware environment (like a "build box" or a virtual machine), with a
full installation of Slackware and no additional packages (or very
few).  You can then use the package repository to install the packages on
other hosts (e.g. with slackpkg+, see below).

slackrepo runs from the command line.  It is not interactive.  Like other
Slackware package management tools, it should be run as the root user,
for example with 'su -'.

You are encouraged to take full control of the building process by
reviewing, customising and creating 'hints'.  These are small
configuration files that determine the processing of each item,
including options and optional dependencies.  A sample set of hints for
SlackBuilds.org are supplied (in the directory /etc/slackrepo/hints_SBo).
For more information, see below.

Dependencies are built and installed automatically, according to the
contents of .info files and hints.  This is done as a 'tree' of
dependencies (not a 'queue'), so in some cases dependencies may be
installed and removed multiple times.  Although time consuming, this
is necessary in some cases to produce clean packages for redistribution.
Remember that dependencies on standard Slackware packages are not (and
should not be) listed in .info files and hints, and are not tracked by
slackrepo.

For a few specific SBo items, additional cleanup is required when they are
removed, to restore a clean standard Slackware build environment.  This
is done by 'cleanup' hints.  When a package conflicts with a standard
Slackware package (e.g. cdrkit and cdrtools), the cleanup hint should
reinstall the standard Slackware package.

Optionally, Eric Hameleers' gen_repos_files.sh (which is included) can
be used to maintain additional package metadata in the package repository,
such as signing and a changelog.  Thanks, Eric!  To use it, you will
need to set a few configuration values in the repository's configuration
file /etc/slackrepo/repo_SBo.conf (but, if you use gen_repos_files.sh
already, your existing ~/.genreprc config file will be read).

Slackrepo is not affiliated with, or endorsed by, SlackBuilds.org or
the Slackware Team.  The author thanks those awesome projects for their
continuing generosity to the community.


OPERATION
---------

slackrepo has four modes of operation: add, rebuild, update and remove.

(1) Add mode:

  slackrepo add [--repo=ID] [--test] [--dry-run] [item...]

In add mode, each specified item in the SlackBuild repository is
built and stored into the package repository if there is no up-to-date
package already stored.  Missing or out-of-date dependencies are also
built and stored into the package repository.  If no items are specified,
everything in the SlackBuild repository is built and stored.  If --test is
specified, the SlackBuilds and packages are subjected to additional
quality assurance tests.  If --dry-run is specified, the packages are
built as normal, but not stored into the package repository.

(2) Rebuild mode:

  slackrepo rebuild [--repo=ID] [--test] [--dry-run] [item...]

Rebuild mode is like add mode, except that packages already in the package
repository will be rebuilt, even if they are up-to-date.

(3) Update mode:

  slackrepo update [--repo=ID] [--test] [--dry-run] [item...]
  slackrepo update [--repo=ID] [--test] --apply[=filename]

In update mode, each specified package (and its dependencies) in the
package repository is compared to the SlackBuild repository, and built,
updated, rebuilt, or removed, as appropriate.  If no items are specified,
*all* items in the package repository are compared.  If --dry-run is
specified, a report is displayed about which packages would be built,
rebuilt, upgraded or removed, but none of these actions are performed.
If --apply is specified, the changes previously reported by --dry-run
are applied.

(4) Remove mode:

  slackrepo remove [--repo=ID] [--dry-run] item...

In remove mode, each item's packages are removed from the repository, and
any cached source files are removed.  If --dry-run is specified, the
packages and source files are not removed.


USAGE NOTES
-----------

Items can be specified as the name of an individual item (e.g. 'wxPython')
or as an individual item in a category (e.g. 'libraries/wxPython'), or as
an entire category of items (e.g. 'libraries').  Obviously, very large
amounts of storage will be needed if you build entire categories.


MESSAGES AND LOGGING
--------------------

All messages from slackrepo are sent to a log file.  Progress messages are
displayed on the screen.  Control arguments '--verbose' (or '-v') and
'--quiet' (or '-q') can be specified, to increase or decrease the details
that are displayed on the screen.

Detailed output from each build process is sent to an item-specific log
file, but is not displayed on the screen.


OPERATION DETAILS
-----------------

Sources are downloaded on demand (unless already available in the
local cache).  A well-functioning network connection is assumed.

A package is considered to be out-of-date if, since it was built --

* the git revision in the directory containing the SlackBuild has changed
* the directory containing the SlackBuilds has untracked/uncommited files
  (i.e. "git is dirty") and they are newer than the package
* any relevant hint (see below) has changed
* any of its direct dependencies has been updated
* the version of Slackware has changed

Changes in the SlackBuilds repository, and changes to the relevant hints,
are classified as 'updates', which will cause directly depending items to
be rebuilt.  Other changes are classified as 'rebuilds' and do not cause
depending items to be rebuilt.

When a package is rebuilt, and when a package is updated but its
version number is unchanged, the BUILD number in the package repository
is always incremented (and the BUILD number in the SlackBuild file is
ignored).


HINTS
-----

'Hints' for specific packages are set by creating small configuration
files in /etc/slackrepo/hints.  An initial set of hint files for SBo
is supplied, but you are encouraged to review and modify them.

In particular, *please* review the README files of the packages you are
building, and then *please* modify the supplied option and dependency hints
for your own requirements!

The types of hints are as follows --

* prg.options       options to supply to the SlackBuild
* prg.optdeps       optional dependencies, including deps for options
* prg.readmedeps    dependencies to substitute for %README% in REQUIRES="..."
* prg.uidgid        groupadd and useradd commands needed for prg
* prg.md5ignore     don't check source md5sum
* prg.makej1        set MAKEFLAGS='-j1' during build
* prg.skipme        do not build prg
* prg.cleanup       script to run after prg is uninstalled
* prg.no_uninstall  do not uninstall prg
* prg.answers       answers for prompts printed when the SlackBuild is run
* prg.version       attempt to patch .info and .SlackBuild for a new version


REPOSITORIES
------------

Multiple repositories are supported.  The Repository ID, e.g. 'SBo',
selects a configuration file, e.g. /etc/slackrepo/repo_SBo.conf, and the
configuration file sets the paths of the git repository, the source
repository, the package repository, the hints directory, and the log
directory.  The Repository ID can be specified by the --repo=ID control
argument, or by the REPO environment variable, and the default ID is set
in the file /etc/slackrepo/repo.default.  By default, the default default
is 'SBo'.

Example showing repository trees for Repository ID 'SBo':

[REPO=SBo] /etc/slackrepo/repo_SBo.conf
            |
[GITREPO]   |--/var/lib/slackrepo/git_SBo/category/item/item.SlackBuild (etc)
[SRCREPO]   |--/var/lib/slackrepo/src_SBo/category/item/item-1.0.tar.gz
[PKGREPO]   |--/var/lib/slackrepo/pkg_SBo/category/item/item-1.0-i486-1_SBo.tgz
            |
[HINTS]     |--/etc/slackrepo/hints_SBo/category/item.options
            |
[LOGDIR]    |--/var/log/slackrepo/log_SBo/category/item.log

Under each of git_SBo, src_SBo and pkg_SBo is a directory for each SBo
category, and under each category directory is a subdirectory for each
item.  Under hints_SBo and log_SBo there are directories for each category, but
the hints and logs are not in subdirectories.


CONFIGURATION
-------------

These configuration options are set in /etc/slackrepo/repo_SBo.conf.
They may be redefined by editing that file, or by setting environment
variables, or by creating the file ~/.slackreporc.

GITREPO=/var/lib/slackrepo/git_SBo
  Location of SlackBuilds git repository

BRANCH=''
  Local git branch to use (see USE OF GIT section below)

SRCREPO=/var/lib/slackrepo/src_SBo
  Location of downloaded source cache

PKGREPO=/var/lib/slackrepo/pkg_SBo
  Location of package repository

HINTS=/etc/slackrepo/hints_SBo
  Location of 'hints' (see HINTS section above)

LOGDIR=/var/log/slackrepo/log_SBo
  Location of log files

TAG=_SBo
  Tag for built packages (PLEASE CHANGE THIS if your packages will be
  publicly available)

ARCH=''
  Arch for built packages (normally determined from the build host)

TMP=/tmp/SBo
  Temporary directory

USE_GENREPOS='0'
  Whether to use gen_repos_files.sh (to enable it, change 0 to 1)

If you enable gen_repos_files.sh, you *must* set correct values for its
configuration options in /etc/slackrepo.conf.  However, if you already
use gen_repos_files.sh, it will still read your existing ~/.genreprc file.


USE OF GIT
----------

If no Git Repository is found, it will be cloned from SlackBuilds.org,
and a local branch '14.1' will be created that tracks 'origin/14.1' (i.e.
the stable branch at SlackBuilds.org).  As a special arrangement, if this
local branch named '14.1' is being used, it will automatically be updated
by fast forward (if possible) from its origin, but only if more than one
day has elapsed since the last update.


SLACKPKG+
---------

The repositories created by slackrepo are suitable for use with slackpkg+
(http://slakfinder.org/slackpkg+.html), which is a plugin for slackpkg
that allows you to use slackpkg to manage packages from third party
repositories.

To make your slackrepo package repositories accessible you will need to
export them as a shared directory (e.g. NFS or a Virtualbox shared folder),
or perhaps serve them via a local webserver on the build host (e.g. by
setting PKGREPO=/var/www/htdocs/pkg_SBo in /etc/slackrepo/repo_SBo.conf).

For example, on a client system, to configure slackpkg+ to use a shared
directory, /etc/slackpkg/slackpkgplus.conf would have something like this:

  REPOPLUS=( SBo slackpkgplus restricted alienbob )
  MIRRORPLUS['SBo']=dir://repositories/pkg_SBo/

Or to configure slackpkg+ to use a web-served repository on the build
host, you would have something like this:

  REPOPLUS=( SBo slackpkgplus restricted alienbob )
  MIRRORPLUS['SBo']=http://buildhost/pkg_SBo/

If you choose not to sign your packages with gen_repos_files.sh, you will
need to tell slackpkg+ not to check GPG signatures.  There are two ways
of doing this: (1) set "CHECKGPG=off" in /etc/slackpkg/slackpkg.conf, or
(2) use the slackpkg control argument '-checkgpg=off'.

Note that slackpkg+ will not detect added new packages in the repository
when you run 'slackpkg install-new'.  This command searches for new packages
ONLY in the official Slackware repository.  To install specific packages
in your own repository you can use

  slackpkg install <packagename>

or to install and update everything in your own repository, you can use

  slackpkg add <reponame>


WARNINGS
--------

(1) BEWARE! This is experimental software! Use with caution!

(2) After it builds or tests a package, slackrepo uninstalls the package
and all its dependencies, and it aggressively removes files from /etc that
Slackware's own tools would normally leave in place.  This will cause serious
damage if you attempt to rebuild a package that is already installed and in
active use (for example, if you use slackrepo to test slackrepo, or if you
rebuild nvidia-driver on a system that uses nvidia-driver).  You can avoid
this by creating a prg.no_uninstall hint file, and then the package will
not be uninstalled.  Just create an empty file; its contents are not read.
