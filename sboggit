#!/bin/bash
#-------------------------------------------------------------------------------
# sboggit - automated package building from SlackBuilds.org git
#
# Copyright 2013 David Spencer, Baildon, West Yorkshire, U.K.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#-------------------------------------------------------------------------------

if [ $# = 0 ]; then
  echo 'Usage: sboggit option|category|item ...'
  echo '  --install      install built packages'
  echo '  --no-install   do not install built packages [default]'
  echo '  --rebuild      rebuild packages that are up-to-date'
  echo '  --no-rebuild   do not rebuild packages that are up-to-date [default]'
  echo '  --clean-repos  remove dead packages from source cache and output repo'
  exit 0
fi

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------

# Save environment variables
ENV_SB_REPO=$SB_REPO                  # /var/lib/sboggit/slackbuilds
ENV_SB_GITBRANCH=$SB_GITBRANCH        # 14.1
ENV_SB_SRC=$SB_SRC                    # /var/lib/sboggit/src
ENV_SB_OUTPUT=$SB_OUTPUT              # /var/lib/sboggit/output
ENV_SB_TAG=$SB_TAG                    # _SBo
ENV_SB_ARCH=$SB_ARCH                  # determined by current host
ENV_SB_HINTS=$SB_HINTS                # /etc/sboggit/hints
ENV_SB_TMP=$SB_TMP                    # /tmp/SBo
ENV_SB_LOGDIR=$SB_LOGDIR              # /var/log/sboggit

# Set variables from config files
if [ -f /etc/sboggit/sboggit.conf ]; then
  . /etc/sboggit/sboggit.conf
fi
if [ -f ~/.sboggitrc ]; then
  . ~/.sboggitrc
fi

# Override config with saved environment
SB_REPO=${ENV_SB_REPO:-$SB_REPO}
SB_GITBRANCH=${ENV_SB_GITBRANCH:-$SB_GITBRANCH}
SB_SRC=${ENV_SB_SRC:-$SB_SRC}
SB_OUTPUT=${ENV_SB_OUTPUT:-$SB_OUTPUT}
SB_TAG=${ENV_SB_TAG:-$SB_TAG}
SB_ARCH=${ENV_SB_ARCH:-$SB_ARCH}
SB_HINTS=${ENV_SB_HINTS:-$SB_HINTS}
SB_TMP=${ENV_SB_TMP:-$SB_TMP}
SB_LOGDIR=${ENV_SB_LOGDIR:-$SB_LOGDIR}

# If arch not set, work it out
if [ -z "$SB_ARCH" ]; then
  case "$( uname -m )" in
    i?86) SB_ARCH=i486 ;;
    arm*) SB_ARCH=arm ;;
       *) SB_ARCH=$( uname -m ) ;;
  esac
fi

#-------------------------------------------------------------------------------
# Initialisation
#-------------------------------------------------------------------------------

# ensure ctrl-c exits the whole thing, not just a random subshell
trap "exit 2" SIGINT SIGQUIT

for f in /usr/libexec/sboggit/functions.d/*functions.sh; do
  if [ -x $f ]; then
    . $f
  fi
done

log_normal "Removing $SB_TMP ..."
rm -rf $SB_TMP
mkdir -p $SB_HINTS $SB_SRC $SB_OUTPUT $SB_TMP
mkdir -p $SB_LOGDIR/PASS $SB_LOGDIR/FAIL
rm -f $SB_LOGDIR/PASSLIST $SB_LOGDIR/FAILLIST $SB_LOGDIR/READMELIST
touch $SB_LOGDIR/PASSLIST $SB_LOGDIR/FAILLIST $SB_LOGDIR/READMELIST

log_normal "Initialising git ..."
if [ -d $SB_REPO/.git ]; then
  cd $SB_REPO
  # This bit is going to be nasty, brutish and short :P
  git checkout -f $SB_GITBRANCH
  git reset --hard
  git clean -xdf
  gitstable='14.1'
  if [ "$SB_GITBRANCH" = 'master' -o "$SB_GITBRANCH" = "$gitstable" ]; then
    if [ -n "$(find $SB_REPO/.git/FETCH_HEAD -mtime +1)" ]; then
      git fetch -a
      git merge --ff-only origin/$SB_GITBRANCH
    fi
  fi
else
  log_normal "Git repository $SB_REPO does not exist; creating it..."
  git clone git://slackbuilds.org/slackbuilds.git $SB_REPO
  cd $SB_REPO
  git fetch -a
  git remote update
  git checkout -b "$gitstable" -t origin/"$gitstable"
fi
log_normal "Finished initialising git."

#-------------------------------------------------------------------------------
# Main loop
#-------------------------------------------------------------------------------

INSTALLFLAG='n'
REBUILDFLAG='n'

while [ $# != 0 ]; do
  echo ""

  ARG=${1%%/}; shift

  case "$ARG" in
  --install)
      INSTALLFLAG='y'
      continue
    ;;
  --no-install)
      INSTALLFLAG='n'
      continue
      ;;
  --rebuild)
      REBUILDFLAG='y'
      continue
      ;;
  --no-rebuild)
      REBUILDFLAG='n'
      continue
      ;;
  --clean-repos)
      clean_srcdir
      clean_outputdir
      continue
      ;;
  esac

  # Check the current argument
  if [ -d $SB_REPO/${ARG##*/} ]; then
    # it's a category: expand it into a list of its items
    set -- $SB_REPO/$ARG/* "$@"
    continue
  fi
  # otherwise, the last component should be an item
  PRG=$(basename ${ARG%%/})
  if [ ! -d $SB_REPO/*/$PRG ]; then
    log_start "ERROR: $PRG is neither a category nor an application"
    continue
  fi
  CATEGORY=$(cd $SB_REPO/*/$PRG/..; basename $(pwd))
  log_start "$CATEGORY/$PRG"

  # Quick check whether the item is unsupported or should be skipped
  if hint_skipme $PRG; then
    continue
  elif ! test_arch_is_supported $PRG; then
    continue
  fi

  # Work out dependencies (DEPLIST), and then which deps are already up-to-date
  # and can just be installed (INSTLIST) and which deps need to be built (TODOLIST)
  export DEPLIST=""
  dependublaster2000 $PRG
  if [ "$(echo $DEPLIST)" != "$PRG" ]; then
    log_normal "Package stack for $PRG:" $DEPLIST
  fi
  INSTLIST=""
  TODOLIST=""
  needbuild='n'
  for dep in $DEPLIST; do
    if test_package_is_uptodate $dep; then
      if [ $needbuild = 'y' ]; then
        TODOLIST=$(echo $TODOLIST $dep)
      else
        INSTLIST=$(echo $INSTLIST $dep)
      fi
    else
      # trigger build for all following deps, even if they are already in SB_OUTPUT
      needbuild='y'
      TODOLIST=$(echo $TODOLIST $dep)
    fi
  done

  # Process INSTLIST and TODOLIST
  # If there's nothing in TODOLIST, don't bother installing :D
  if [ "$TODOLIST" != '' ]; then
    if [ "$TODOLIST" != "$PRG" ]; then
      log_normal "To-do list for $PRG:" $DEPLIST
    fi
    instok='y'
    for instprg in $INSTLIST; do
      install_prebuilt_packages $instprg
      if [ $? != 0 ]; then
        instok='n'
        [ $instprg != $PRG ] && log_error "ABORTED $CATEGORY/$PRG"
        break
      fi
    done
    if [ $instok = 'y' ]; then
      for todoprg in $TODOLIST; do
        build_package $todoprg
        if [ $? != 0 ]; then
          [ $todoprg != $PRG ] && log_error "ABORTED $CATEGORY/$PRG"
          break
        fi
      done
    fi
    echo "-------------------------------------------------------------------------------"
    for instprg in $INSTLIST $TODOLIST; do
      uninstall_package $instprg
    done
  fi

done

if [ "$SB_USE_GENREPOS" = 1 ]; then
  sh /usr/libexec/sboggit/gen_repos_files.sh
fi

exit 0
